# install maven using below command
      sudo apt-get install maven
      mvn --version
# create a new repo in git, specify name, public view, git ignore, license
# git clone the remote repo
      git clone <https://github.com/gokulrajakumar/maven_tutorials.git>
# default directory structure for maven is,
      src/main/java       ==> for java applications
      src/main/resources  ==> resources required for the java application
      src/test/java       ==> for unit testing the applications
      src/test/resouces   ==> resources required for unit testing the application
      src/main/webapp     ==> for webapp
      src/main/groovy     ==> for groovy
      target              ==> compiled source file is placed here
# using the POM file,
      mvn compile ==> this compiles the source code
      mvn package ==> this packages the java file into a jar file and keeps it under target directory
      mvn install ==> this moves the jar file into local maven repo under /home/user/.m2/repository/clinic/programming/maven_tutorials/1.0
      mvn clean   ==> removes the target folder to make it ready for next build
      mvn test    ==> will test our application against the testing class that is placed inside src/test/java
# plugins
      * to update various plugins go to the maven.apache.org and go to the plugin that needs updates.
      * for example if java compiler needs to be updated, go inside the plugin and search for the maven code to upadtae it
      * get the info and paste inside the pom file.
# dependency
      * id developer uses a new feature of code, he will write the updated code in his class file.
      * to update maven about new dependency, we need to update POM file.
      * for example if we need commons-lang3 in our code, go to search.maven.org and search the plugin that is related.
      * open it and copy the maven code onto our pom file.
# Testing
      * to test the code, we need the class for testing it and placed under src/test/java usng the same package structure
      * we also need junit plugis added in our dependency. but we dont need junit for our code, only we need it for our test class
      * so enter <scope>test</test> inside the junit dependency
  
